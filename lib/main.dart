import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'dart:async';
import 'dart:ui' as ui;

// --- ADD FIREBASE IMPORTS ---
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // This should be generated by the FlutterFire CLI

// --- Import ALL your screens ---
import 'screens/home_screen.dart';
import 'screens/login_screen.dart';
import 'screens/splash_screen_animation.dart';
import 'screens/manage_notes_screen.dart';
import 'screens/upload_notes_screen.dart';
import 'screens/profile_screen.dart';
import 'screens/forum_screen.dart';
import 'screens/trending_notes_screen.dart';
import 'screens/search_notes_screen.dart';
import 'screens/view_notes_screen.dart';
import 'screens/settings_screen.dart';
import 'screens/calendar_screen.dart';
import 'screens/todo_screen.dart';
import 'screens/search_users_screen.dart';
// import 'screens/signup_screen.dart'; // REMOVED as it was causing an error
import 'screens/create_post_screen.dart';
import 'screens/followers_list_screen.dart';
import 'screens/verify_otp_reset_screen.dart';

// --- Import Providers and Services ---
import 'providers/theme_provider.dart';
import 'providers/note_engagement_provider.dart';
import 'services/supabase_service.dart';
import 'services/auth_service.dart';
import 'services/user_service.dart';


final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

// It's better practice to keep state out of global variables where possible,
// but for this refactor, we'll keep them and focus on the linter warnings.
bool _supabaseInitialized = false;
bool _adsInitialized = false;
String? _initializationError;

void main() async {
  // Use a Zone to catch all uncaught errors from the Flutter framework and async gaps.
  runZonedGuarded<Future<void>>(() async {
    // Ensure Flutter bindings are initialized before any Flutter-specific code.
    WidgetsFlutterBinding.ensureInitialized();

    // Load environment variables before ANY other service.
    await dotenv.load(fileName: ".env");

    // Initialize services and handle potential errors.
    await _initializeAppServices();

    // Set up global error handlers to catch any issues during the app's lifecycle.
    _setupGlobalErrorHandlers();

    runApp(EntryApp(
      supabaseInitialized: _supabaseInitialized,
      adsInitialized: _adsInitialized,
      initializationError: _initializationError,
    ));
  }, (error, stack) {
    // This catches errors that might happen outside the Flutter framework's context.
    _initializationError =
        "A critical error occurred during application startup: $error";
    runApp(EntryApp(
      supabaseInitialized: _supabaseInitialized,
      adsInitialized: _adsInitialized,
      initializationError: _initializationError,
    ));
  });
}

/// Encapsulates the initialization logic for services.
Future<void> _initializeAppServices() async {
  try {
    // Initialize Firebase first as it might be a dependency for other services.
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );

    // Initialize Supabase.
    await SupabaseService.initialize();
    _supabaseInitialized = true;

    // Set up a listener for authentication state changes.
    SupabaseService.client.auth.onAuthStateChange.listen((data) {
      _handleAuthStateChange(data);
    });

    // Initialize Google Mobile Ads.
    await MobileAds.instance.initialize();
    _adsInitialized = true;
  } catch (e) {
    _supabaseInitialized = false;
    // Provide a user-friendly error message.
    _initializationError =
        "Failed to connect to backend services. Please check your internet connection and try again.\nError: ${e.toString()}";
  }
}

/// Sets up global error handlers for Flutter.
void _setupGlobalErrorHandlers() {
  FlutterError.onError = (FlutterErrorDetails details) {
    // Log the error to the console for debugging.
    FlutterError.dumpErrorToConsole(details);
    _initializationError =
        "${_initializationError ?? ""}\nA Flutter error occurred: ${details.exceptionAsString()}";
  };

  ui.PlatformDispatcher.instance.onError = (error, stack) {
    _initializationError =
        "${_initializationError ?? ""}\nAn unexpected error occurred: $error";
    // This must return true to indicate that the error has been handled.
    return true;
  };
}

/// Handles authentication state changes from Supabase.
void _handleAuthStateChange(AuthState data) async {
  final AuthChangeEvent event = data.event;
  final Session? session = data.session;
  final currentContext = navigatorKey.currentContext;

  if (event == AuthChangeEvent.signedIn && session != null) {
      // FIX: The method 'getProfile' was not defined in UserService.
      // Replaced with a direct Supabase call to check if a profile exists.
      final profileResponse = await Supabase.instance.client
          .from('profiles')
          .select('id')
          .eq('id', session.user.id)
          .maybeSingle();

      if (profileResponse == null) {
        // If no profile exists for the signed-in user, create one.
        // This is the definitive fix for the sign-up issue.
        await _createProfileForNewUser(session.user);
      }

    // A user has signed in. Initialize user-specific providers.
    if (currentContext != null && currentContext.mounted) {
      final noteEngagementProvider =
          Provider.of<NoteEngagementProvider>(currentContext, listen: false);
      
      AuthService().getUserRole(session.user.id).then((role) {
        // Check if context is still mounted after async operation.
        if (currentContext.mounted) {
          noteEngagementProvider.initialize(session.user.id);
        }
      }).catchError((e) {
        debugPrint("Error getting user role on sign-in: $e");
      });
    }
  } else if (event == AuthChangeEvent.signedOut) {
    // A user has signed out. Clear user-specific data and navigate to the login screen.
    if (currentContext != null && currentContext.mounted) {
      try {
        Provider.of<NoteEngagementProvider>(currentContext, listen: false)
            .clear();
      } catch (e) {
        debugPrint("Error clearing NoteEngagementProvider on sign-out: $e");
      }
    }
    navigatorKey.currentState
        ?.pushNamedAndRemoveUntil('/login', (route) => false);
  }
}

/// Creates a profile for a new user, ensuring a unique username.
Future<void> _createProfileForNewUser(User user) async {
  try {
    // Generate a potential username from user metadata (OAuth) or email.
    final emailUsername = user.email?.split('@').first ?? 'user${DateTime.now().millisecondsSinceEpoch}';
    final potentialUsername = user.userMetadata?['username'] ??
                              user.userMetadata?['name']?.replaceAll(' ', '_').toLowerCase() ??
                              emailUsername;

    // Ensure the username is unique to avoid database constraint errors.
    var finalUsername = potentialUsername;
    int counter = 1;
    while (true) {
      final existing = await Supabase.instance.client
          .from('profiles')
          .select('id')
          .eq('username', finalUsername)
          .maybeSingle();

      if (existing == null) {
        // Username is available.
        break;
      } else {
        // Username is taken, append a number and try again.
        finalUsername = '$potentialUsername$counter';
        counter++;
      }
    }

    // Extract other details from user metadata.
    final fullName = user.userMetadata?['full_name'] ?? user.userMetadata?['name'];
    final avatarUrl = user.userMetadata?['avatar_url'];

    // Insert the new profile into the 'profiles' table.
    // RLS ERROR NOTE: The "violates row-level security policy" error means
    // your Supabase policy for the 'profiles' table is preventing this insert.
    // Ensure you have a policy that allows authenticated users to insert their own profile.
    // Example Policy: `CREATE POLICY "Users can insert their own profile." ON profiles FOR INSERT WITH CHECK ( auth.uid() = id );`
    await Supabase.instance.client.from('profiles').insert({
      'id': user.id,
      'username': finalUsername,
      'name': fullName,
      'email': user.email,
      'profile_picture': avatarUrl,
      'created_at': DateTime.now().toIso8601String(),
    });
  } catch (e) {
    debugPrint('Error creating profile: $e');
  }
}


/// The initial widget that decides whether to show the app or an error screen.
class EntryApp extends StatelessWidget {
  final bool supabaseInitialized;
  final bool adsInitialized;
  final String? initializationError;

  const EntryApp({
    super.key,
    required this.supabaseInitialized,
    required this.adsInitialized,
    this.initializationError,
  });

  @override
  Widget build(BuildContext context) {
    if (!supabaseInitialized) {
      return InitializationErrorScreen(
          error: initializationError ??
              "Critical: Backend services failed to initialize.");
    }
    // Also show error screen for critical startup errors caught by the zoned guard.
    if (initializationError != null &&
        (initializationError!.toLowerCase().contains("critical") ||
            initializationError!.toLowerCase().contains("zoned guard"))) {
      return InitializationErrorScreen(error: initializationError!);
    }
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => NoteEngagementProvider()),
      ],
      child: const MyApp(),
    );
  }
}

/// The root widget of the application.
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, child) {
        // --- Define Shared Colors ---
        const Color primaryPurple = Color(0xFF9050E0); // Main vibrant purple
        const Color accentPurpleDarkTheme =
            Color(0xFFB388FF); // Lighter for dark theme accents
        const Color accentPurpleLightTheme =
            Color(0xFF7020C0); // Darker for light theme accents

        // --- Dark Theme Definition (Pitch Blacker) ---
        const Color darkScaffoldBackground = Colors.black;
        const Color darkSurfaceColor = Color(
            0xFF121212); // Very dark grey for cards, dialogs, appbar, bottom_nav
        const Color darkBodyTextColor = Color(0xFFE0E0E0);
        const Color darkSubtleTextColor = Color(0xFFA0A0A0);
        const Color darkHintTextColor = Color(0xFF757575);
        const Color darkDividerColor = Color(0xFF2C2C2C);

        final baseDarkTheme = ThemeData.dark(useMaterial3: true);
        ThemeData customDarkTheme = baseDarkTheme.copyWith(
          scaffoldBackgroundColor: darkScaffoldBackground,
          primaryColor: primaryPurple,
          hintColor: darkHintTextColor,
          cardColor: darkSurfaceColor,
          canvasColor: darkSurfaceColor,
          // FIX: Changed DialogTheme to DialogThemeData
          dialogTheme: const DialogThemeData(
            backgroundColor: darkSurfaceColor,
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(16.0))),
            titleTextStyle: TextStyle(
                color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold),
            contentTextStyle: TextStyle(color: darkBodyTextColor),
          ),
          appBarTheme: AppBarTheme(
            backgroundColor: darkSurfaceColor,
            elevation: 0,
            foregroundColor: Colors.white,
            titleTextStyle: const TextStyle(
              fontFamily: 'Roboto',
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.w500,
            ),
            iconTheme: IconThemeData(color: Colors.grey[400]),
            actionsIconTheme: IconThemeData(color: Colors.grey[400]),
            systemOverlayStyle: SystemUiOverlayStyle.light.copyWith(
              statusBarColor: Colors.transparent,
              statusBarIconBrightness: Brightness.light,
            ),
          ),
          textTheme: baseDarkTheme.textTheme
              .apply(
                fontFamily: 'Roboto',
                bodyColor: darkBodyTextColor,
                displayColor: Colors.white,
              )
              .copyWith(
                titleLarge:
                    const TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
                titleMedium: TextStyle(
                    color: Colors.white.withOpacity(0.9), fontWeight: FontWeight.w500),
                titleSmall: TextStyle(color: darkBodyTextColor.withOpacity(0.9)),
                bodyLarge:
                    const TextStyle(color: darkBodyTextColor, height: 1.5),
                bodyMedium:
                    const TextStyle(color: darkSubtleTextColor, height: 1.4),
                bodySmall: const TextStyle(color: darkHintTextColor),
                labelLarge: const TextStyle(
                    color: Colors.white, fontWeight: FontWeight.w600),
              ),
          cardTheme: const CardThemeData(
            elevation: 0.0,
            margin: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(16.0))),
            color: darkSurfaceColor,
          ),
          elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
              backgroundColor: primaryPurple,
              foregroundColor: Colors.white,
              padding:
                  const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              shape: const RoundedRectangleBorder(
                  borderRadius: BorderRadius.all(Radius.circular(12.0))),
              textStyle: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Roboto'),
            ),
          ),
          textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
            foregroundColor: accentPurpleDarkTheme,
            textStyle:
                const TextStyle(fontWeight: FontWeight.w600, fontFamily: 'Roboto'),
          )),
          outlinedButtonTheme: OutlinedButtonThemeData(
              style: OutlinedButton.styleFrom(
            foregroundColor: darkBodyTextColor,
            side: const BorderSide(color: darkDividerColor),
            shape: const RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(12.0))),
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
          )),
          chipTheme: ChipThemeData(
            backgroundColor: darkSurfaceColor,
            labelStyle: const TextStyle(
                color: darkSubtleTextColor, fontFamily: 'Roboto', fontSize: 12),
            selectedColor: primaryPurple.withOpacity(0.25),
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            shape: const RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(10.0))),
            iconTheme: const IconThemeData(color: darkHintTextColor, size: 16),
            side: BorderSide.none,
          ),
          bottomNavigationBarTheme: const BottomNavigationBarThemeData(
            backgroundColor: darkSurfaceColor,
            selectedItemColor: primaryPurple,
            unselectedItemColor: darkHintTextColor,
            elevation: 0,
            type: BottomNavigationBarType.fixed,
            showSelectedLabels: false,
            showUnselectedLabels: false,
          ),
          inputDecorationTheme: InputDecorationTheme(
            filled: true,
            fillColor: darkSurfaceColor,
            hintStyle: const TextStyle(color: darkHintTextColor),
            labelStyle: const TextStyle(color: darkSubtleTextColor),
            border: const OutlineInputBorder(
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide.none,
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: const BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: darkDividerColor.withOpacity(0.5)),
            ),
            focusedBorder: const OutlineInputBorder(
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: primaryPurple, width: 1.5),
            ),
            prefixIconColor: darkHintTextColor,
            suffixIconColor: darkHintTextColor,
          ),
          dividerTheme: const DividerThemeData(
            color: darkDividerColor,
            thickness: 0.5,
          ),
          colorScheme: ColorScheme.fromSeed(
            seedColor: primaryPurple,
            brightness: Brightness.dark,
            surface: darkSurfaceColor,
            onSurface: darkBodyTextColor,
            primary: primaryPurple,
            onPrimary: Colors.white,
            secondary: accentPurpleDarkTheme,
            onSecondary: Colors.black,
            error: const Color(0xFFCF6679),
            onError: Colors.black,
          ).copyWith(surface: darkScaffoldBackground),
          pageTransitionsTheme: const PageTransitionsTheme(
            builders: {
              TargetPlatform.android: CupertinoPageTransitionsBuilder(),
              TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
            },
          ),
        );

        // --- Light Theme Definition ---
        const Color lightScaffoldBackground = Color(0xFFF5F5F7);
        const Color lightCardBackground = Colors.white;
        const Color lightBodyTextColor = Color(0xFF212121);
        const Color lightSubtleTextColor = Color(0xFF424242);
        const Color lightHintTextColor = Color(0xFF757575);
        const Color lightDividerColor = Color(0xFFE0E0E0);

        final baseLightTheme = ThemeData.light(useMaterial3: true);
        ThemeData customLightTheme = baseLightTheme.copyWith(
          scaffoldBackgroundColor: lightScaffoldBackground,
          primaryColor: primaryPurple,
          hintColor: lightHintTextColor,
          cardColor: lightCardBackground,
          canvasColor: lightScaffoldBackground,
          // FIX: Changed DialogTheme to DialogThemeData
          dialogTheme: const DialogThemeData(
            backgroundColor: lightCardBackground,
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(16.0))),
            titleTextStyle: TextStyle(
                color: Colors.black87,
                fontSize: 18,
                fontWeight: FontWeight.bold),
            contentTextStyle: TextStyle(color: lightSubtleTextColor),
          ),
          appBarTheme: AppBarTheme(
            backgroundColor: lightScaffoldBackground,
            elevation: 0.5,
            foregroundColor: primaryPurple,
            titleTextStyle: const TextStyle(
              fontFamily: 'Roboto',
              color: primaryPurple,
              fontSize: 20,
              fontWeight: FontWeight.w600,
            ),
            iconTheme: const IconThemeData(color: primaryPurple),
            actionsIconTheme: const IconThemeData(color: primaryPurple),
            systemOverlayStyle: SystemUiOverlayStyle.dark.copyWith(
              statusBarColor: Colors.transparent,
              statusBarIconBrightness: Brightness.dark,
            ),
          ),
          textTheme: baseLightTheme.textTheme
              .apply(
                fontFamily: 'Roboto',
                bodyColor: lightBodyTextColor,
                displayColor: Colors.black,
              )
              .copyWith(
                titleLarge: const TextStyle(
                    color: Colors.black87, fontWeight: FontWeight.w600),
                titleMedium: const TextStyle(
                    color: Colors.black87, fontWeight: FontWeight.w500),
                titleSmall: const TextStyle(color: lightSubtleTextColor),
                bodyLarge:
                    const TextStyle(color: lightBodyTextColor, height: 1.5),
                bodyMedium:
                    const TextStyle(color: lightSubtleTextColor, height: 1.4),
                bodySmall: const TextStyle(color: lightHintTextColor),
                labelLarge: const TextStyle(
                    color: Colors.white, fontWeight: FontWeight.w600),
              ),
          cardTheme: CardThemeData(
            elevation: 0.5,
            margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            shape: const RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(16.0))),
            color: lightCardBackground,
            shadowColor: Colors.black.withOpacity(0.08),
          ),
          elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
              backgroundColor: primaryPurple,
              foregroundColor: Colors.white,
              padding:
                  const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              shape: const RoundedRectangleBorder(
                  borderRadius: BorderRadius.all(Radius.circular(12.0))),
              textStyle: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Roboto'),
            ),
          ),
          textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
            foregroundColor: accentPurpleLightTheme,
            textStyle:
                const TextStyle(fontWeight: FontWeight.w600, fontFamily: 'Roboto'),
          )),
          outlinedButtonTheme: OutlinedButtonThemeData(
              style: OutlinedButton.styleFrom(
            foregroundColor: primaryPurple,
            side: BorderSide(color: primaryPurple.withOpacity(0.4)),
            shape: const RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(12.0))),
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
          )),
          chipTheme: ChipThemeData(
            backgroundColor: Colors.grey[200],
            labelStyle: const TextStyle(
                color: lightSubtleTextColor, fontFamily: 'Roboto', fontSize: 12),
            selectedColor: primaryPurple.withOpacity(0.1),
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            shape: const RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(10.0))),
            iconTheme: const IconThemeData(color: lightHintTextColor, size: 16),
            side: BorderSide(color: Colors.grey[300]!),
          ),
          bottomNavigationBarTheme: BottomNavigationBarThemeData(
            backgroundColor: Colors.white,
            selectedItemColor: primaryPurple,
            unselectedItemColor: Colors.grey[500],
            elevation: 0,
            type: BottomNavigationBarType.fixed,
            showSelectedLabels: false,
            showUnselectedLabels: false,
          ),
          inputDecorationTheme: InputDecorationTheme(
            filled: true,
            fillColor: Colors.grey[100],
            hintStyle: TextStyle(color: Colors.grey[500]),
            labelStyle: TextStyle(color: Colors.grey[700]),
            border: const OutlineInputBorder(
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide.none,
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: const BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            focusedBorder: const OutlineInputBorder(
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: primaryPurple, width: 1.5),
            ),
            prefixIconColor: Colors.grey[600],
            suffixIconColor: Colors.grey[600],
          ),
          dividerTheme: const DividerThemeData(
            color: lightDividerColor,
            thickness: 0.5,
          ),
          colorScheme: ColorScheme.fromSeed(
            seedColor: primaryPurple,
            brightness: Brightness.light,
            surface: lightCardBackground,
            onSurface: lightBodyTextColor,
            primary: primaryPurple,
            onPrimary: Colors.white,
            secondary: accentPurpleLightTheme,
            onSecondary: Colors.white,
            error: Colors.red.shade700,
            onError: Colors.white,
          ).copyWith(surface: lightScaffoldBackground),
          pageTransitionsTheme: const PageTransitionsTheme(
            builders: {
              TargetPlatform.android: CupertinoPageTransitionsBuilder(),
              TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
            },
          ),
        );

        return MaterialApp(
          navigatorKey: navigatorKey,
          title: 'Black',
          debugShowCheckedModeBanner: false,
          theme: customLightTheme,
          darkTheme: customDarkTheme,
          themeMode: themeProvider.themeMode,
          initialRoute: '/',
          onGenerateRoute: (RouteSettings settings) {
            WidgetBuilder builder;
            final args = settings.arguments as Map<String, dynamic>? ?? {};
            switch (settings.name) {
              case '/':
                builder = (BuildContext _) => const SplashScreenAnimation();
                break;
              case '/login':
                builder = (BuildContext _) => const LoginScreen();
                break;
              case '/home':
                final userId =
                    args['userId'] as String? ?? SupabaseService.currentUserId;
                final userRole = args['userRole'] as String? ?? 'User';
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "User session invalid. Please log in.", context);
                } else {
                  builder = (BuildContext _) =>
                      HomeScreen(userId: userId, userRole: userRole);
                }
                break;
              case '/verify-otp-reset':
                final email = args['email'] as String?;
                if (email == null) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "Email required for OTP verification.", context);
                } else {
                  builder = (BuildContext _) =>
                      VerifyOtpAndResetScreen(email: email);
                }
                break;
              case '/manage_notes':
                final userId =
                    args['userId'] as String? ?? SupabaseService.currentUserId;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "User ID required for Manage Notes", context);
                } else {
                  builder =
                      (BuildContext _) => ManageNotesScreen(userId: userId);
                }
                break;
              case '/upload_note':
                final userId =
                    args['userId'] as String? ?? SupabaseService.currentUserId;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "User ID required for Upload Note", context);
                } else {
                  builder = (BuildContext _) => UploadNotesScreen(userId: userId);
                }
                break;
              case '/profile':
                final profileUserId = args['userId'] as String?;
                final currentLoggedInUserId = SupabaseService.currentUserId;
                if (profileUserId == null || profileUserId.isEmpty) {
                  builder = (BuildContext context) =>
                      _buildRedirectToLogin("Profile User ID required", context);
                } else if (currentLoggedInUserId == null ||
                    currentLoggedInUserId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "Login required to view profiles", context);
                } else {
                  builder = (BuildContext _) => ProfileScreen(
                      userId: profileUserId,
                      currentUserId: currentLoggedInUserId);
                }
                break;
              case '/settings':
                builder = (BuildContext _) => const SettingsScreen();
                break;
              case '/search_notes':
                final userId = SupabaseService.currentUserId;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "Login required to Search Notes", context);
                } else {
                  builder = (BuildContext _) => SearchNotesScreen(userId: userId);
                }
                break;
              case '/search_users':
                final currentUserId = SupabaseService.currentUserId;
                if (currentUserId == null || currentUserId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "Login required to Search Users", context);
                } else {
                  builder = (BuildContext _) =>
                      SearchUsersScreen(currentUserId: currentUserId);
                }
                break;
              case '/trending_notes':
                final userId = SupabaseService.currentUserId;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "Login required for Trending Notes", context);
                } else {
                  builder =
                      (BuildContext _) => TrendingNotesScreen(userId: userId);
                }
                break;
              case '/view_notes':
                final userId = SupabaseService.currentUserId;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "Login required to View Notes", context);
                } else {
                  builder = (BuildContext _) => ViewNotesScreen(userId: userId);
                }
                break;
              case '/calendar':
                builder = (BuildContext _) => const CalendarScreen();
                break;
              case '/todo':
                builder = (BuildContext _) => const TodoScreen();
                break;
              // REMOVED '/signup' route as it was causing an error
              case '/create_post':
                final userId = SupabaseService.currentUserId;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "Login required to Create Post", context);
                } else {
                  builder = (BuildContext _) => CreatePostScreen(userId: userId);
                }
                break;
              case '/followers_list':
                final userId = args['userId'] as String?;
                final showFollowers = args['showFollowers'] as bool? ?? true;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) => _buildRedirectToLogin(
                      "User ID required for Followers List", context);
                } else {
                  builder = (BuildContext _) => FollowersListScreen(
                      userId: userId, showFollowers: showFollowers);
                }
                break;
              case '/forum':
                final userId = SupabaseService.currentUserId;
                if (userId == null || userId.isEmpty) {
                  builder = (BuildContext context) =>
                      _buildRedirectToLogin("Login required for Forum", context);
                } else {
                  builder = (BuildContext _) => ForumScreen(userId: userId);
                }
                break;
              default:
                builder = (BuildContext context) =>
                    _buildRedirectToLogin("Page not found.", context);
            }
            return MaterialPageRoute(builder: builder, settings: settings);
          },
          onUnknownRoute: (settings) {
            return MaterialPageRoute(builder: (_) => const LoginScreen());
          },
        );
      },
    );
  }

  /// A helper method to redirect to the login screen with a message.
  Widget _buildRedirectToLogin(String message, BuildContext context) {
    // Use a post-frame callback to ensure the widget tree is built before navigating.
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final currentNavigator = navigatorKey.currentState;
      if (currentNavigator != null) {
        currentNavigator.pushNamedAndRemoveUntil(
            '/login', (Route<dynamic> route) => false);
        if (currentNavigator.context.mounted) {
            ScaffoldMessenger.of(currentNavigator.context).showSnackBar(
                SnackBar(content: Text(message), duration: const Duration(seconds: 3)));
        }
      }
    });
    // Show a loading indicator while the redirection is happening.
    return const Scaffold(
        body: Center(
            child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        CircularProgressIndicator(),
        SizedBox(height: 10),
        Text("Redirecting...")
      ],
    )));
  }
}

/// A dedicated screen to show initialization errors.
class InitializationErrorScreen extends StatelessWidget {
  const InitializationErrorScreen({super.key, required this.error});
  final String error;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.light().copyWith(
          textTheme: ThemeData.light().textTheme.apply(fontFamily: 'Roboto')),
      darkTheme: ThemeData.dark().copyWith(
          textTheme: ThemeData.dark().textTheme.apply(fontFamily: 'Roboto')),
      themeMode: ThemeMode.system,
      home: Scaffold(
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.error_outline, color: Colors.red, size: 60),
                const SizedBox(height: 20),
                const Text("Application Initialization Failed",
                    style:
                        TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center),
                const SizedBox(height: 15),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                      color: Colors.red.shade50,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.red.shade100)),
                  child: Text(error,
                      style: TextStyle(color: Colors.red.shade900),
                      textAlign: TextAlign.center),
                ),
                const SizedBox(height: 25),
                const Text(
                    "Please check your connection and restart the app.",
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.grey)),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
